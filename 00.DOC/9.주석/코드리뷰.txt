<<기능에 대한 검토 체크사항>>

시스템의 요구사항이 제대로 반영되었는가?
시스템의 설계의 규격대로 구현되었는가?
과도한 코딩을 하고 있지 않는가?
같은 기능 구현을 더 단순하게 할 수 있는가?
함수의 입출력 값은 명확한가?
빌딩 블록들( 알고리즘, 자료구조, 데이터 타입, 템플릿, 라이브러리, API )등이 적절하게 사용되었는가?
좋은 패턴과 추상화( 상태도, 모듈화 )등을 사용해서 구현하고 있는가?
의존도가 높은 함수나 라이브러리 등의 의존관계에 대해서 별도 기술하고 있는가?
함수의 반환(exit)은 한 곳에서 이루어지고 있는가?
모든 변수는 사용 전에 초기화하고 있는가?
사용하지 않는 변수가 있는가?
하나의 함수는 하나의 기능만 수행하고 있는가?

<<스타일과 코딩 가이드>>

코딩 스타일 가이드를 준수하고 있는가?
각 파일의 헤더 정보가 존재하는가?
각 함수의 정보를 코드에 대해서 설명하기에 충분한가?
주석은 적절하게 기술되어있는가?
코드는 잘 구조화되어있는가? ( 가독성, 기능적 측면 )
헤더, 함수 정보를 도구로 추출해서 자동으로 문서화할 수 있는 구조인가?
변수와 함수의 이름이 일관되게 기술되어 있는가?
프로젝트의 가이드를 통한 네이밍 규칙을 준수하고 있는가?
숫자의 경우 단위에 대해서 기술하고 있는가?
숫자를 직접 서술하지 않고, 상수를 사용하고 있는가?
어셈블리 코드를 사용하였다면 이를 대체할 방법은 없는가?
수행되지 않는 코드는 없는가?
주석 처리된 코드는 삭제가 되었는가? ( 버전 체크가 되었는가? )
간결하지만 너무 특이한 코드가 존재하는가?
설명을 보거나 작성자에게 물어봐야만 이해가 가능한 코드가 있는가?
구현 예정인 기능이 있다면, ToDo주석으로 표시되어 있는가?


<<아키텍처에 대한 검토>>

함수의 길이는 적당한가? ( 화면을 넘기면 안 된다. )
이 코드는 재사용이 가능한가?
전역 변수는 최소로 사용하였는가?
변수의 범위는 적절하게 선언되었는가?
클래스와 함수가 관련된 기능끼리 그룹화가 되었는가? ( 응집도는 어떤가? )
관련된 함수들이 흩어져 있지 않는가?
중복된 함수나 클래스가 있지 않는가?
코드가 이식성을 고려하여 작성되었는가? ( 프로세스의 특성을 받는 변수 타입이 고려되어있는가? )
데이터에 맞게 타입이 구체적으로 선언되었는가?
If/else구분이 2단계 이상 중접되었다면 이를 함수로 더 구분하라
Switch/case문이 중첩되었다면 이를 더 구분하라
리소스에 lock이 있다면, unlock은 반드시 이루어지는가?
힙 메모리 할당과 해제는 항상 짝을 이루는가?
스택 변수를 반환하고 있는가?
외부/공개 라이브러리 사용하였을 경우에 MIT 라이선스를 확인했는가? GPL의 경우에는 관련된 영역에서만 사용해야 한다.
블로킹 api호출시에 비동기적인 방식으로 처리하고 있는가?

<<예외처리 관련 체크리스트>>

입력 파라미터의 유효 범위는 체크하고 있는가?
에러코드와 예외(exception)의 호출 함수는 분명하게 반환되고 있는가?
호출 함수가 어려와 예외처리 코드를 가지고 있는가?
Null포인트와 음수가 처리되는 구조인가?
에러코드에 대해서 명쾌하게 선언하고 처리하고 있는가?
switch문에 default가 존재하고, 예외처리를 하고 있는가?
배열 사용시에 index범위를 체크하는가?
포인트 사용시에 유요한 범위를 체크하는가?
Garbage collection을 제대로 하고 있는가?
수학계산시에 overflow, underflow가 발생할 가능성이 있는가?
에러 조건이 체크되고 에러 발생 시 로깅 정보를 남기는가?
에러 메시지와 에러코드가 에러의 의미를 잘 전달하는가?
Try/catch 에러 핸들링 사용방법은 적절하게 구현되었는가?

<<시간의 흐름에 대한 체크>>

최악의 조건에 대해서 고려하였는가?
무한루프와 재귀 함수는 특이사항이 아니라면 없어야 한다.
재귀 함수 사용시에 call stack값의 최댓값이 고정되어 있는가?
경쟁조건이 존재하는가?
스레드는 정상 생성, 정상 동작하는 코드를 가지고 있는가?
불필요한 최적화를 통해서 코드 가독성을 희생하였는가?
임베디드의 경우에도 최적화가 매우 중요하지 않다면, 가독성을 더 중요하게 해야 한다

<<검증과 시험>>

코드는 시험하기 쉽게 작성되었는가?
단위 테스트가 쉽게 될 수 있는가?
에러 핸들링 코드도 잘 테스트되었는가?
컴파일, 링크 체크 시에 경고 메시지도 100% 처리하였는가?
경계값, 음수값, 0/1등의 가독성이 떨어지는 코드에 대해서 충분하게 경계하고 있는가?
테스트를 위한 fault 조건 재현을 쉽게 할 수 있는가?
모든 인터페이스와 모든 예외 조건에 대해서 테스트 코드가 있는가?
최악의 조건에서도 리소스 사용은 문제가 없는가?
런타임 시의 오류와 로그에 대비한 시스템이 있는가?
테스트를 위한 주석 코드가 존재하는가?

<<하드웨어에 대한 테스트>>